# Run progress: 0.00% complete, ETA 00:10:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.009 us/op
# Warmup Iteration   2: 0.009 us/op
# Warmup Iteration   3: 0.008 us/op
# Warmup Iteration   4: 0.008 us/op
# Warmup Iteration   5: 0.007 us/op
# Warmup Iteration   6: 0.007 us/op
# Warmup Iteration   7: 0.007 us/op
# Warmup Iteration   8: 0.008 us/op
# Warmup Iteration   9: 0.006 us/op
# Warmup Iteration  10: 0.009 us/op
Iteration   1: 0.007 us/op
Iteration   2: 0.007 us/op
Iteration   3: 0.007 us/op
Iteration   4: 0.007 us/op
Iteration   5: 0.007 us/op
Iteration   6: 0.005 us/op
Iteration   7: 0.005 us/op
Iteration   8: 0.005 us/op
Iteration   9: 0.005 us/op
Iteration  10: 0.003 us/op


Result "com.allst.jmh.tools.ReentrantLockExample4.base":
  0.006 ��(99.9%) 0.002 us/op [Average]
  (min, avg, max) = (0.003, 0.006, 0.007), stdev = 0.001
  CI (99.9%): [0.004, 0.008] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_144, Java HotSpot(TM) 64-Bit Server VM, 25.144-b01
# VM invoker: D:\Program Files\Java\jdk1.8.0_144\jre\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.allst.jmh.tools.ReentrantLockExample4.testLockMethod

# Run progress: 33.33% complete, ETA 00:06:44
# Fork: 1 of 1
# Warmup Iteration   1: 0.029 us/op
# Warmup Iteration   2: 0.030 us/op
# Warmup Iteration   3: 0.030 us/op
# Warmup Iteration   4: 0.029 us/op
# Warmup Iteration   5: 0.026 us/op
# Warmup Iteration   6: 0.026 us/op
# Warmup Iteration   7: 0.026 us/op
# Warmup Iteration   8: 0.026 us/op
# Warmup Iteration   9: 0.026 us/op
# Warmup Iteration  10: 0.026 us/op
Iteration   1: 0.026 us/op
Iteration   2: 0.031 us/op
Iteration   3: 0.031 us/op
Iteration   4: 0.026 us/op
Iteration   5: 0.028 us/op
Iteration   6: 0.028 us/op
Iteration   7: 0.028 us/op
Iteration   8: 0.033 us/op
Iteration   9: 0.039 us/op
Iteration  10: 0.033 us/op


Result "com.allst.jmh.tools.ReentrantLockExample4.testLockMethod":
  0.030 ��(99.9%) 0.006 us/op [Average]
  (min, avg, max) = (0.026, 0.030, 0.039), stdev = 0.004
  CI (99.9%): [0.024, 0.036] (assumes normal distribution)


# JMH version: 1.36
# VM version: JDK 1.8.0_144, Java HotSpot(TM) 64-Bit Server VM, 25.144-b01
# VM invoker: D:\Program Files\Java\jdk1.8.0_144\jre\bin\java.exe
# VM options: <none>
# Blackhole mode: full + dont-inline hint (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 10 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: com.allst.jmh.tools.ReentrantLockExample4.testSyncMethod

# Run progress: 66.67% complete, ETA 00:03:21
# Fork: 1 of 1
# Warmup Iteration   1: 0.037 us/op
# Warmup Iteration   2: 0.013 us/op
# Warmup Iteration   3: 0.012 us/op
# Warmup Iteration   4: 0.012 us/op
# Warmup Iteration   5: 0.011 us/op
# Warmup Iteration   6: 0.011 us/op
# Warmup Iteration   7: 0.012 us/op
# Warmup Iteration   8: 0.011 us/op
# Warmup Iteration   9: 0.010 us/op
# Warmup Iteration  10: 0.011 us/op
Iteration   1: 0.011 us/op
Iteration   2: 0.010 us/op
Iteration   3: 0.009 us/op
Iteration   4: 0.009 us/op
Iteration   5: 0.009 us/op
Iteration   6: 0.009 us/op
Iteration   7: 0.012 us/op
Iteration   8: 0.006 us/op
Iteration   9: 0.009 us/op
Iteration  10: 0.006 us/op


Result "com.allst.jmh.tools.ReentrantLockExample4.testSyncMethod":
  0.009 ��(99.9%) 0.003 us/op [Average]
  (min, avg, max) = (0.006, 0.009, 0.012), stdev = 0.002
  CI (99.9%): [0.006, 0.012] (assumes normal distribution)


# Run complete. Total time: 00:10:04

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt  Score   Error  Units
ReentrantLockExample4.base            avgt   10  0.006 �� 0.002  us/op
ReentrantLockExample4.testLockMethod  avgt   10  0.030 �� 0.006  us/op
ReentrantLockExample4.testSyncMethod  avgt   10  0.009 �� 0.003  us/op

